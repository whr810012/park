{"ast":null,"code":"import axios from \"axios\";\nimport router from \"../router/index\";\nimport { Message } from \"element-ui\";\nconst BASE_URL = \"http://localhost:3000\";\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 响应拦截器\ninstance.interceptors.response.use(response => {\n  // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n  // 否则的话抛出错误\n  if (response.status === 200) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(response);\n  }\n},\n// 服务器状态码不是2开头的的情况\n// 这里可以跟你们的后台开发人员协商好统一的错误状态码\n// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等\n// 下面列举几个常见的操作，其他需求可自行扩展\nerror => {\n  switch (error.response.status) {\n    // 401: 未登录\n    // 未登录则跳转登录页面，并携带当前页面的路径\n    // 在登录成功后返回当前页面，这一步需要在登录页操作。\n    case 401:\n      router.replace({\n        path: \"/login\",\n        query: {\n          redirect: router.currentRoute.fullPath\n        }\n      });\n      break;\n\n    // 403 token过期\n    // 登录过期对用户进行提示\n    // 清除本地token和清空vuex中token对象\n    // 跳转登录页面\n    case 403:\n      Message(\"登录过期，请重新登录\");\n      // 清除token\n      // ...\n\n      // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n      break;\n\n    // 404请求不存在\n    case 404:\n      Message(\"网络请求不存在\");\n      break;\n    // 其他错误，直接抛出错误提示\n    default:\n      Message(error.response.data.Message);\n  }\n  return Promise.reject(error.response);\n});\nexport function request(config) {\n  return instance(config);\n}","map":{"version":3,"names":["axios","router","Message","BASE_URL","instance","create","baseURL","timeout","headers","interceptors","response","use","status","Promise","resolve","reject","error","replace","path","query","redirect","currentRoute","fullPath","data","request","config"],"sources":["C:/Users/Administrator/Desktop/ershou/src/api/index.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"../router/index\";\r\nimport { Message } from \"element-ui\";\r\n\r\nconst BASE_URL = \"http://localhost:3000\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    timeout: 10000,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  // 响应拦截器\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n      // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\r\n      // 否则的话抛出错误\r\n      if (response.status === 200) {\r\n        return Promise.resolve(response);\r\n      } else {\r\n        return Promise.reject(response);\r\n      }\r\n    },\r\n    // 服务器状态码不是2开头的的情况\r\n    // 这里可以跟你们的后台开发人员协商好统一的错误状态码\r\n    // 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等\r\n    // 下面列举几个常见的操作，其他需求可自行扩展\r\n    (error) => {\r\n      switch (error.response.status) {\r\n        // 401: 未登录\r\n        // 未登录则跳转登录页面，并携带当前页面的路径\r\n        // 在登录成功后返回当前页面，这一步需要在登录页操作。\r\n        case 401:\r\n          router.replace({\r\n            path: \"/login\",\r\n            query: {\r\n              redirect: router.currentRoute.fullPath,\r\n            },\r\n          });\r\n          break;\r\n  \r\n        // 403 token过期\r\n        // 登录过期对用户进行提示\r\n        // 清除本地token和清空vuex中token对象\r\n        // 跳转登录页面\r\n        case 403:\r\n          Message(\"登录过期，请重新登录\");\r\n          // 清除token\r\n          // ...\r\n  \r\n          // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\r\n          break;\r\n  \r\n        // 404请求不存在\r\n        case 404:\r\n          Message(\"网络请求不存在\");\r\n          break;\r\n        // 其他错误，直接抛出错误提示\r\n        default:\r\n          Message(error.response.data.Message);\r\n      }\r\n      return Promise.reject(error.response);\r\n    }\r\n  );\r\n  \r\n  export function request(config) {\r\n    return instance(config);\r\n  }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,OAAO,QAAQ,YAAY;AAEpC,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC1BC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACFJ,QAAQ,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7BD,QAAQ,IAAK;EACZ;EACA;EACA,IAAIA,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IAC3B,OAAOC,OAAO,CAACC,OAAO,CAACJ,QAAQ,CAAC;EAClC,CAAC,MAAM;IACL,OAAOG,OAAO,CAACE,MAAM,CAACL,QAAQ,CAAC;EACjC;AACF,CAAC;AACD;AACA;AACA;AACA;AACCM,KAAK,IAAK;EACT,QAAQA,KAAK,CAACN,QAAQ,CAACE,MAAM;IAC3B;IACA;IACA;IACA,KAAK,GAAG;MACNX,MAAM,CAACgB,OAAO,CAAC;QACbC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE;UACLC,QAAQ,EAAEnB,MAAM,CAACoB,YAAY,CAACC;QAChC;MACF,CAAC,CAAC;MACF;;IAEF;IACA;IACA;IACA;IACA,KAAK,GAAG;MACNpB,OAAO,CAAC,YAAY,CAAC;MACrB;MACA;;MAEA;MACA;;IAEF;IACA,KAAK,GAAG;MACNA,OAAO,CAAC,SAAS,CAAC;MAClB;IACF;IACA;MACEA,OAAO,CAACc,KAAK,CAACN,QAAQ,CAACa,IAAI,CAACrB,OAAO,CAAC;EACxC;EACA,OAAOW,OAAO,CAACE,MAAM,CAACC,KAAK,CAACN,QAAQ,CAAC;AACvC,CACF,CAAC;AAED,OAAO,SAASc,OAAOA,CAACC,MAAM,EAAE;EAC9B,OAAOrB,QAAQ,CAACqB,MAAM,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}