{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  return _openBlock(), _createBlock(_component_el_autocomplete, {\n    class: \"inline-input\",\n    modelValue: $data.searchWords,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchWords = $event),\n    \"fetch-suggestions\": $options.fetchSuggestions,\n    placeholder: \"请输入内容\",\n    \"trigger-on-focus\": false,\n    onSelect: $options.handleSelect\n  }, null, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"]);\n}","map":{"version":3,"names":["_createBlock","_component_el_autocomplete","class","$data","searchWords","$event","$options","fetchSuggestions","placeholder","onSelect","handleSelect"],"sources":["C:\\Users\\Administrator\\Desktop\\ershou\\src\\components\\mapSelect.vue"],"sourcesContent":["<template>\r\n  <el-autocomplete\r\n    class=\"inline-input\"\r\n    v-model=\"searchWords\"\r\n    :fetch-suggestions=\"fetchSuggestions\"\r\n    placeholder=\"请输入内容\"\r\n    :trigger-on-focus=\"false\"\r\n    @select=\"handleSelect\"\r\n  ></el-autocomplete>\r\n</template>\r\n\r\n<script>\r\nimport AMapLoader from '@amap/amap-jsapi-loader';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchWords: '',\r\n      list: [],\r\n    };\r\n  },\r\n  methods: {\r\n    fetchSuggestions(query, callback) {\r\n      // 清空列表\r\n      this.list = [];\r\n\r\n      window._AMapSecurityConfig = {\r\n        securityJsCode: \"638210509d7b98e8c4ca472ab5110203\",\r\n      };\r\n\r\n      AMapLoader.load({\r\n        key: 'a05ab04a5dbe61ad2fad7b664790a18f',\r\n        version: '2.0',\r\n        plugins: ['AMap.AutoComplete'],\r\n      }).then((AMap) => {\r\n        AMap.plugin('AMap.AutoComplete', () => {\r\n          const autoOptions = {\r\n            city: '全国', // 限定城市，默认全国\r\n          };\r\n\r\n          // 实例化 AutoComplete\r\n          const autoComplete = new AMap.AutoComplete(autoOptions);\r\n          // 根据关键字进行搜索\r\n          autoComplete.search(query, (status, result) => {\r\n            if (status === 'complete' && result && result.tips) {\r\n              // 将结果传给 callback\r\n              callback(result.tips.map(item =>{\r\n                return {\r\n                  value: item.name,\r\n                  address: item.district + item.address,\r\n                };\r\n              }));\r\n            } else {\r\n              // 如果没有找到建议，传递一个空数组\r\n              callback([]);\r\n            }\r\n          });\r\n        });\r\n      }).catch(error => {\r\n        console.error('加载 AMap 失败:', error);\r\n        // 发生错误时也传递空数组\r\n        callback([]);\r\n      });\r\n    },\r\n    handleSelect(item) {\r\n      console.log('选择的项:', item);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* 添加样式如果需要 */\r\n</style>"],"mappings":";;;uBACEA,YAAA,CAOmBC,0BAAA;IANjBC,KAAK,EAAC,cAAc;gBACXC,KAAA,CAAAC,WAAW;+DAAXD,KAAA,CAAAC,WAAW,GAAAC,MAAA;IACnB,mBAAiB,EAAEC,QAAA,CAAAC,gBAAgB;IACpCC,WAAW,EAAC,OAAO;IAClB,kBAAgB,EAAE,KAAK;IACvBC,QAAM,EAAEH,QAAA,CAAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}